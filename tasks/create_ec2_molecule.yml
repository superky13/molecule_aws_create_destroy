---
- name: merge security arrays
  set_fact:
    security_group_rules: "{{ security_group_rules + security_group_rules_app | default([]) }}"

- name: Create security group
  ec2_group:
    name: "{{ security_group_name }}"
    description: "{{ security_group_name }}"
    rules: "{{ security_group_rules }}"
    rules_egress: "{{ security_group_rules_egress }}"

- name: Test for presence of local keypair
  stat:
    path: "{{ keypair_path }}"
  register: keypair_local

- name: debug keypair path
  debug:
    msg: "{{ keypair_path }}"

- name: Delete remote keypair
  ec2_key:
    name: "{{ keypair_name }}"
    state: absent
  when: not keypair_local.stat.exists

- name: Create keypair
  ec2_key:
    name: "{{ keypair_name }}"
  register: keypair

- name: Persist the keypair
  copy:
    dest: "{{ keypair_path }}"
    content: "{{ keypair.key.private_key }}"
    mode: 0600
  when: keypair.changed

- name: Get the ec2 ami(s) by owner and name, if image not set
  ec2_ami_facts:
    owners: "{{ item.image_owner }}"
    filters:
      name: "{{ item.image_name }}"
  loop: "{{ molecule_yml.platforms }}"
  when: item.image is not defined
  register: ami_facts

- name: Create molecule instance(s)
  ec2:
    key_name: "{{ keypair_name }}"
    image: "{{ item.image
      if item.image is defined
      else (ami_facts.results[index].images | sort(attribute='creation_date', reverse=True))[0].image_id }}"
    instance_type: "{{ item.instance_type }}"
    vpc_subnet_id: "{{ item.vpc_subnet_id }}"
    group: "{{ security_group_name }}"
    instance_tags: "{{ item.instance_tags | combine({'instance': item.name})
      if item.instance_tags is defined
      else {'instance': item.name} }}"
    wait: true
    assign_public_ip: true
    exact_count: 1
    count_tag:
      instance: "{{ item.name }}"
  register: server
  loop: "{{ molecule_yml.platforms }}"
  loop_control:
    index_var: index
  async: 7200
  poll: 0

- name: Wait for instance(s) creation to complete
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  until: ec2_jobs.finished
  retries: 300
  with_items: "{{ server.results }}"

# Mandatory configuration for Molecule to function.

- name: Populate instance config dict
  set_fact:
    instance_conf_dict: {
      'instance': "{{ item.instances[0].tags.instance }}",
      'address': "{{ item.instances[0].public_ip }}",
      'private_address': "{{ item.instances[0].private_ip }}",
      'user': "{{ ssh_user }}",
      'port': "{{ ssh_port }}",
      'identity_file': "{{ keypair_path }}",
      'instance_ids': "{{ item.instance_ids }}", 
      'disks': "{{ additional_disks | default('[]') }}", }
  with_items: "{{ ec2_jobs.results }}"
  register: instance_config_dict
  when: server.changed | bool

- name: Convert instance config dict to a list
  set_fact:
    instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
  when: server.changed | bool

- name: Dump instance config
  copy:
    content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
    dest: "{{ molecule_instance_config }}"
  when: server.changed | bool

- name: Wait for SSH
  wait_for:
    port: "{{ ssh_port }}"
    host: "{{ item.address }}"
    search_regex: SSH
    delay: 10
    timeout: 320
  with_items: "{{ lookup('file', molecule_instance_config) | molecule_from_yaml }}"

- name: create and attach ebs volumes asynchronously to molecule instances
  ec2_vol:
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
    security_token: "{{ aws_secret_token |default(omit) }}"
    instance: "{{ item[0].instance_ids[0] }}"
    device_name: "{{ item[1].name }}"
    volume_size: "{{ item[1].size }}"
    region: "{{ lookup('env', 'EC2_REGION') }}"
    volume_type: "{{ item[1].type }}"
    delete_on_termination: "yes"
  register: ebscreate
  with_items:
  - "{{ lookup('subelements', instance_conf, 'disks', {'skip_missing': True}) }}"
  loop_control:
    label: ''
